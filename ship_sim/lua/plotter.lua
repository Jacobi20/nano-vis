--------------------------------------------------------------------------------- The MIT License-- Copyright (c) 2010 IFMO/GameDev Studio-- Permission is hereby granted, free of charge, to any person obtaining a copy-- of this software and associated documentation files (the "Software"), to deal-- in the Software without restriction, including without limitation the rights-- to use, copy, modify, merge, publish, distribute, sublicense, and/or sell-- copies of the Software, and to permit persons to whom the Software is-- furnished to do so, subject to the following conditions:-- The above copyright notice and this permission notice shall be included in-- all copies or substantial portions of the Software.-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN-- THE SOFTWARE.-------------------------------------------------------------------------------local	dv		=	require("dv");local 	math	=	require("math");module("plotter");local offset = 1;local function drawAxisPoints(axis_size, ax, ay, az, scale_a, scale_p, step, axis_pos_x, axis_pos_y, axis_pos_z)	for i=0, axis_size/scale_a, step do		dv.drawPoint(ax*i*scale_a + axis_pos_x, ay*i*scale_a + axis_pos_y , az*i*scale_a + axis_pos_z, scale_p);	end	for i=0, axis_size/scale_a, step do		dv.drawPoint(-ax*i*scale_a + axis_pos_x, -ay*i*scale_a + axis_pos_y , -az*i*scale_a + axis_pos_z, scale_p);	endendfunction makePlot3D(data, scalex, scaley, scalez, px, py, pz, plot3d_x, plot3d_y, plot3d_z)		max_x = 0;	max_y = 0;	max_z = 0;		dv.setColor(0  ,1 ,0 );	for i=2, #data, 1 do			dv.setColor(0,1,0, 1);			--dv.setColor(0,1,0, i/2000.0);			local x0	=	data[i-1][px] * scalex + plot3d_x;			local y0	=	data[i-1][py] * scaley + plot3d_y;			local z0	=	data[i-1][pz] * scalez + plot3d_z;			local x1	=	data[i][px]   * scalex + plot3d_x;			local y1	=	data[i][py]   * scaley + plot3d_y;			local z1	=	data[i][pz]   * scalez + plot3d_z;						if math.abs(data[i][px]) > max_x then max_x = math.abs(data[i][px]); end			if math.abs(data[i][py]) > max_y then max_y = math.abs(data[i][py]); end			if math.abs(data[i][pz]) > max_z then max_z = math.abs(data[i][pz]); end						local a = math.fmod(i,5);			if math.abs(a) < 0.01 then				dv.drawArrow( x0,y0,z0, x1-x0,y1-y0,z1-z0, 1 );			else				dv.drawLine( x0,y0,z0, x1,y1,z1 );			end	end		axis_len_x = offset + max_x*scalex;	axis_len_y = offset + max_y*scaley;	axis_len_z = offset + max_z*scalez;		--dv.setColor( 1, 0.5, 0.5 );	dv.setColor( 1, 1, 1 );	dv.drawLine( plot3d_x - axis_len_x, plot3d_y, plot3d_z,  plot3d_x + axis_len_x, plot3d_y, plot3d_z );	-- Draw X	--dv.drawArrow( plot3d_x - axis_len_x, plot3d_y, plot3d_z,  plot3d_x + axis_len_x, plot3d_y, plot3d_z );	-- Draw X	drawAxisPoints(axis_len_x, 1,0,0, scalex,  1.0,  1.0, plot3d_x, plot3d_y, plot3d_z);	drawAxisPoints(axis_len_x, 1,0,0, scalex,  0.2,  0.2, plot3d_x, plot3d_y, plot3d_z);		--dv.setColor( 0.5, 1, 0.5 );	dv.drawLine( plot3d_x, plot3d_y - axis_len_y, plot3d_z,  plot3d_x, plot3d_y + axis_len_y, plot3d_z );	-- Draw Y	drawAxisPoints(axis_len_y, 0,1,0, scaley,  1.0,  1.0, plot3d_x, plot3d_y, plot3d_z);	drawAxisPoints(axis_len_y, 0,1,0, scaley,  0.2,  0.2, plot3d_x, plot3d_y, plot3d_z);		--dv.setColor( 0.5, 0.5, 1 );	dv.drawLine( plot3d_x, plot3d_y, plot3d_z - axis_len_z,  plot3d_x, plot3d_y, plot3d_z + axis_len_z );	-- Draw Z	drawAxisPoints(axis_len_z, 0,0,1, scalez,  1.0,  1.0, plot3d_x, plot3d_y, plot3d_z);	drawAxisPoints(axis_len_z, 0,0,1, scalez,  0.2,  0.2, plot3d_x, plot3d_y, plot3d_z);	endfunction makePlot2D(data, scaley, scalez, py, pz, plot2d_x, plot2d_y, plot2d_z)		max_y = 0;	max_z = 0;		dv.setColor( 0, 0, 1 );	for i=2, #data, 1 do			--dv.setColor(0,0,1, i/2000.0);			local y0	=	data[i-1][py] * scaley + plot2d_y;			local z0	=	data[i-1][pz] * scalez + plot2d_z;			local y1	=	data[i][py]   * scaley + plot2d_y;			local z1	=	data[i][pz]   * scalez + plot2d_z;			if data[i][py] > max_y then max_y = data[i][py]; end			if data[i][pz] > max_z then max_z = data[i][pz]; end				dv.drawLine( plot2d_x,y0,z0, plot2d_x,y1,z1 );	end	axis_len_y = offset + max_y*scaley;	axis_len_z = offset + max_z*scalez;		dv.setColor(0,1,0);	dv.drawLine( plot2d_x, plot2d_y, plot2d_z,  plot2d_x, plot2d_y + axis_len_y	, plot2d_z 	        	);	-- Draw Y	dv.drawLine( plot2d_x, plot2d_y, plot2d_z,  plot2d_x, plot2d_y     			, plot2d_z + axis_len_z );	-- Draw Z		drawAxisPoints(axis_len_y, 0,1,0, scaley, 0.35, 10,  plot2d_x, plot2d_y, plot2d_z);	drawAxisPoints(axis_len_y, 0,1,0, scaley, 0.20,  5,  plot2d_x, plot2d_y, plot2d_z);	drawAxisPoints(axis_len_z, 0,0,1, scalez, 0.35, 10,  plot2d_x, plot2d_y, plot2d_z);	drawAxisPoints(axis_len_z, 0,0,1, scalez, 0.20,  5,  plot2d_x, plot2d_y, plot2d_z);	end